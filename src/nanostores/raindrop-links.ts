import { batched, task } from 'nanostores';
import { lsAtom } from '../helpers/lsAtom';
import {
  RaindropLinkType,
  RaindropCollectionTree,
  TTL_TIME,
  defaultValue,
  getCollectionTree,
  flattenTreeToLinks,
} from '../models/raindrop-links';
import { $settings } from './settings';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
export const $raindropCollectionTree = lsAtom<RaindropCollectionTree[]>(
  'raindropCollectionTree',
  defaultValue,
);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export const $raindropLinks = lsAtom<RaindropLinkType[]>(
  'raindropLinks',
  [],
);

export const $lastFetchTimestamp = lsAtom<number>(
  'raindropLinksLastFetchTimestamp',
  0,
);

// Stringify the raindropApiKey to avoid unnecessary fetches (—É–±–∏—Ä–∞–µ–º raindropCollection, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
const $raindropKeys = batched(
  [$settings, $lastFetchTimestamp],
  ({ raindropApiKey }, lastFetchTimestamp) =>
    JSON.stringify({
      raindropApiKey,
      lastFetchTimestamp,
    }),
);

$raindropKeys.subscribe((value) => {
  task(async () => {
    const { raindropApiKey, lastFetchTimestamp } = JSON.parse(value);

    if (!raindropApiKey) {
      return;
    }

    const lastFetchDiffMs = new Date().getTime() - lastFetchTimestamp;
    const timeout =
      TTL_TIME - lastFetchDiffMs < 0 ? 0 : TTL_TIME - lastFetchDiffMs;

    const timeoutId = setTimeout(async () => {
      await updateCollectionTreeData(raindropApiKey);
    }, timeout);
    return () => clearInterval(timeoutId);
  });
});

async function updateCollectionTreeData(raindropApiKey: string) {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Raindrop.io...');
    const collectionTree = await getCollectionTree(raindropApiKey);
    
    if (collectionTree && collectionTree.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      $raindropCollectionTree.set(collectionTree);
      
      // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const flatLinks = flattenTreeToLinks(collectionTree);
      $raindropLinks.set(flatLinks);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${collectionTree.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å ${flatLinks.length} —Å—Å—ã–ª–∫–∞–º–∏`);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö Raindrop.io:', e);
  }
  $lastFetchTimestamp.set(new Date().getTime());
}
