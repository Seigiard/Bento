export interface RaindropCollection {
  _id: number;
  title: string;
  color?: string;
  count?: number;
  cover?: string[];
  parent?: {
    $id: number;
  };
  children?: RaindropCollection[];
  raindrops?: RaindropItem[];
}

export interface RaindropItem {
  _id: number;
  title: string;
  link: string;
  excerpt?: string;
  cover?: string;
  domain?: string;
  created?: string;
  lastUpdate?: string;
}

export interface RaindropApiResponse<T> {
  result: boolean;
  items: T[];
  count?: number;
}

export class RaindropAPI {
  private apiKey: string;
  private baseUrl = 'https://api.raindrop.io/rest/v1';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  private async makeRequest<T>(endpoint: string): Promise<RaindropApiResponse<T>> {
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`Raindrop API error: ${response.status} ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   */
  async getRootCollections(): Promise<RaindropCollection[]> {
    try {
      const response = await this.makeRequest<RaindropCollection>('/collections');
      return response.items || [];
    } catch (error) {
      console.error('Error fetching root collections:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   */
  async getChildCollections(): Promise<RaindropCollection[]> {
    try {
      const response = await this.makeRequest<RaindropCollection>('/collections/childrens');
      return response.items || [];
    } catch (error) {
      console.error('Error fetching child collections:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å raindrops –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   */
  async getRaindrops(collectionId: number, perpage = 50): Promise<RaindropItem[]> {
    try {
      const response = await this.makeRequest<RaindropItem>(`/raindrops/${collectionId}?perpage=${perpage}`);
      return response.items || [];
    } catch (error) {
      console.error(`Error fetching raindrops for collection ${collectionId}:`, error);
      return [];
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –∏—Ö raindrops
   */
  async buildCollectionTree(): Promise<RaindropCollection[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const [rootCollections, childCollections] = await Promise.all([
        this.getRootCollections(),
        this.getChildCollections(),
      ]);

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
      const allCollections = [...rootCollections, ...childCollections];
      const collectionMap = new Map<number, RaindropCollection>();
      
      allCollections.forEach(collection => {
        collectionMap.set(collection._id, { ...collection, children: [], raindrops: [] });
      });

      // –°—Ç—Ä–æ–∏–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const rootTree: RaindropCollection[] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º
      childCollections.forEach(child => {
        if (child.parent?.$id) {
          const parent = collectionMap.get(child.parent.$id);
          const childWithChildren = collectionMap.get(child._id);
          if (parent && childWithChildren) {
            parent.children!.push(childWithChildren);
          }
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      rootCollections.forEach(root => {
        const rootWithChildren = collectionMap.get(root._id);
        if (rootWithChildren) {
          rootTree.push(rootWithChildren);
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º raindrops –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await this.loadRaindropsForTree(rootTree);

      return rootTree;
    } catch (error) {
      console.error('Error building collection tree:', error);
      return [];
    }
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç raindrops –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –¥–µ—Ä–µ–≤–µ
   */
  private async loadRaindropsForTree(collections: RaindropCollection[]): Promise<void> {
    const promises = collections.map(async (collection) => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º raindrops –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      collection.raindrops = await this.getRaindrops(collection._id);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      if (collection.children && collection.children.length > 0) {
        await this.loadRaindropsForTree(collection.children);
      }
    });

    await Promise.all(promises);
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  printCollectionTree(collections: RaindropCollection[], indent = 0): void {
    collections.forEach(collection => {
      const indentStr = '  '.repeat(indent);
      console.log(`${indentStr}üìÅ ${collection.title} (${collection.count || 0} items, ${collection.raindrops?.length || 0} raindrops loaded)`);
      
      // –í—ã–≤–æ–¥–∏–º raindrops
      if (collection.raindrops && collection.raindrops.length > 0) {
        collection.raindrops.slice(0, 3).forEach(raindrop => {
          console.log(`${indentStr}  üîó ${raindrop.title}`);
        });
        if (collection.raindrops.length > 3) {
          console.log(`${indentStr}  ... –∏ –µ—â—ë ${collection.raindrops.length - 3} raindrops`);
        }
      }

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      if (collection.children && collection.children.length > 0) {
        this.printCollectionTree(collection.children, indent + 1);
      }
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  async fetchAndPrintFullStructure(): Promise<RaindropCollection[]> {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–π Raindrop.io...');
    
    const tree = await this.buildCollectionTree();
    
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:');
    this.printCollectionTree(tree);
    
    console.log(`\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tree.length} –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π`);
    return tree;
  }
}